% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tripeptide_motif_score.R
\name{peptide_motif_score}
\alias{peptide_motif_score}
\alias{peptide_motif_score,ribosomeObj-method}
\title{Calculate Peptide Motif Scores}
\usage{
peptide_motif_score(
  object,
  min_counts = 64,
  norm_type = c("average", "rpm"),
  average_normalization = c("yes", "no"),
  occurrence_threshold = 100,
  ...
)

\S4method{peptide_motif_score}{ribosomeObj}(
  object,
  min_counts = 64,
  norm_type = c("average", "rpm"),
  average_normalization = c("yes", "no"),
  occurrence_threshold = 100,
  ...
)
}
\arguments{
\item{object}{ribosomeObj object.}

\item{min_counts}{Minimum counts to filter gene, default 64.}

\item{norm_type}{The nomalization methods for ribosome density. "average" is calculated by
the count at each position divided by mean density across cds region. "rpm"
is calculated by the count at each position divided by the total counts and multiplied with 10^6.
Default is "average".}

\item{average_normalization}{Whether do average normalization, yes or no.}

\item{occurrence_threshold}{An integer specifying the minimum occurrence threshold for peptide motifs.}

\item{...}{Useless args.}
}
\value{
This function does not return a value, but creates output files in a 'peptide_motif' directory.
        Each output file is named '[sample_name]_tripeptide_occupancy.txt'.
}
\description{
This function calculates peptide motif scores based on amino acid sequences and codon expression data.
It uses a Python script to perform the calculations and saves the results for each sample.
}
\details{
This function performs the following steps:
  1. Creates a 'peptide_motif' directory if it doesn't exist.
  2. Sources a Python script 'peptideMotifScore.py' from the RiboProfiler package.
  3. For each codon expression file:
     - Calls the Python function to calculate peptide motif scores.
     - Saves the results in the 'peptide_motif' directory.
     - Prints a message indicating the file has been processed.
}
