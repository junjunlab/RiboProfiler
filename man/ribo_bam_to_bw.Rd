% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ribo_bam_to_bigwig.R
\name{ribo_bam_to_bw}
\alias{ribo_bam_to_bw}
\title{Convert BAM file to BigWig format}
\usage{
ribo_bam_to_bw(
  bam_file = NULL,
  output_file = NULL,
  julia_path = NULL,
  seq_type = c("pairedEnd", "singleEnd"),
  assignType = c("end5", "end3"),
  normalization = c("rpm", "counts"),
  min_length = 28,
  max_length = 31,
  offset = ""
)
}
\arguments{
\item{bam_file}{Character string. Path to the input BAM file.}

\item{output_file}{Character string. Path for the output BigWig file.}

\item{julia_path}{The julia program path on the computer.}

\item{seq_type}{Character string. Sequencing type, either "pairedEnd" or "singleEnd". Default is "pairedEnd".}

\item{assignType}{Character string. Read assignment type, either "end5" or "end3". Default is "end5".}

\item{normalization}{Character string. Normalization method, either "rpm" or "counts". Default is "rpm".}

\item{min_length}{Integer. Minimum read length to include. Default is 28.}

\item{max_length}{Integer. Maximum read length to include. Default is 31.}

\item{offset}{Offset to apply to read positions eg "28,29,30,31|-15,-15,-15,-15".
Default is "".}
}
\value{
None. The function writes the output to the specified BigWig file.
}
\description{
This function converts a BAM file to BigWig format, with options for
sequencing type, read assignment, normalization, and read length filtering.
}
\details{
This function uses Julia and the XAM and BigWig packages to process the BAM file.
It will install Julia and necessary packages if they are not already available.
The conversion process considers sequencing type, read assignment strategy,
normalization method, and filters reads based on length.
}
\note{
Ensure that you have sufficient permissions to install Julia packages and
write to the output directory.
}
\examples{
\dontrun{
bam_to_bw(bam_file = "path/to/input.bam",
          output_file = "path/to/output.bw",
          seq_type = "singleEnd",
          assignType = "end5",
          normalization = "rpm",
          min_length = 25,
          max_length = 35)
}


}
